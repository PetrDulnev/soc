services:

  backend:
    image: my-back
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "9251:9251"
    depends_on:
      - pg-db
      - pg-admin
      - minio
      - nginx-web
    env_file:
      - path: ./.env
    environment:
      SERVER_PORT: ${SERVER_PORT}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_URL: ${MINIO_URL}
    networks:
      - back_network
      - proxy
    restart: always
    expose:
      - 8080
    volumes:
      - backend:/data

  pg-db:
    image: postgres:latest
    env_file:
      - path: ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_DATA: ${POSTGRES_DATA}
    volumes:
      - postgres:/data/postgres
    expose:
      - "1234"
    restart: unless-stopped
    networks:
      - back_network
    depends_on:
      - nginx-web

  pg-admin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    restart: always
    env_file:
      - path: ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "1111:80"
    networks:
      - back_network
    depends_on:
      - nginx-web

  minio:
    image: minio/minio:latest
    command: minio server /minio_data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    env_file:
      - path: ./.env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - back_network
    depends_on:
      - nginx-web

  nginx-web:
    image: my-nginx
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"
    restart: always
    environment:
      NGINX_HOST: foobar
      NGINX_PORT: 80
    networks:
      - proxy


networks:
  back_network:
    driver: bridge
  proxy:
    driver: bridge


volumes:
  postgres:
  minio_storage:
  backend: